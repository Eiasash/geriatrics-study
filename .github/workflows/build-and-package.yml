name: Build, Audit & Release

on:
  push:
    branches: [main]
    tags: ['v*']
    paths:
      - 'h5p/**'
      - 'anki/**'
      - 'data/**'
      - '.github/workflows/build-and-package.yml'
  pull_request:
    branches: [main]
    paths:
      - 'h5p/**'
      - 'anki/**'
      - 'data/**'
      - '.github/workflows/build-and-package.yml'
  workflow_dispatch:
    inputs:
      release:
        description: 'Create a release'
        required: false
        type: boolean
        default: false

# Prevent concurrent runs for the same PR/branch
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

jobs:
  # Detect which components changed
  changes:
    name: Detect changes
    runs-on: ubuntu-latest
    outputs:
      h5p: ${{ steps.filter.outputs.h5p }}
      anki: ${{ steps.filter.outputs.anki }}
      data: ${{ steps.filter.outputs.data }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            h5p:
              - 'h5p/**'
              - 'data/**'
            anki:
              - 'anki/**'
              - 'data/**'
            data:
              - 'data/**'

  # Security audits run in parallel using matrix
  audit:
    name: Security audit (${{ matrix.component }})
    runs-on: ubuntu-latest
    needs: changes
    if: |
      github.event_name == 'push' || 
      github.event_name == 'workflow_dispatch' ||
      (matrix.component == 'h5p' && needs.changes.outputs.h5p == 'true') ||
      (matrix.component == 'anki' && needs.changes.outputs.anki == 'true')
    strategy:
      fail-fast: false
      matrix:
        include:
          - component: h5p
            language: node
          - component: anki
            language: python
    steps:
      - uses: actions/checkout@v4
      
      # Node.js audit for H5P
      - name: Setup Node.js
        if: matrix.language == 'node'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: h5p/package-lock.json
      
      - name: Install npm dependencies
        if: matrix.language == 'node'
        working-directory: h5p
        run: npm ci
      
      - name: Run npm audit
        if: matrix.language == 'node'
        working-directory: h5p
        run: |
          npm audit --audit-level=moderate || true
          npx audit-ci --moderate
        continue-on-error: true
      
      # Python audit for Anki
      - name: Setup Python
        if: matrix.language == 'python'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip
          cache-dependency-path: anki/requirements.txt
      
      - name: Run pip-audit
        if: matrix.language == 'python'
        uses: pypa/gh-action-pip-audit@v1
        with:
          inputs: anki/requirements.txt
        continue-on-error: true

  # Build components in parallel using matrix
  build:
    name: Build ${{ matrix.component }} (${{ matrix.mode || 'default' }})
    runs-on: ubuntu-latest
    needs: [changes, audit]
    if: |
      github.event_name == 'push' || 
      github.event_name == 'workflow_dispatch' ||
      (matrix.component == 'h5p' && needs.changes.outputs.h5p == 'true') ||
      (matrix.component == 'anki' && needs.changes.outputs.anki == 'true')
    strategy:
      fail-fast: false
      matrix:
        include:
          # H5P builds
          - component: h5p
            mode: questionset
            artifact: h5p-questionset
            build_cmd: npm run build:qset
          - component: h5p
            mode: mega
            artifact: h5p-mega
            build_cmd: |
              export TOPICS="דליריום,שבריריות (Frailty),רישום ודה-פרסקייבינג תרופות,נפילות,דמנציה ומחלת אלצהיימר"
              export PASS=75
              npm run build:mega
          # Anki build
          - component: anki
            artifact: anki-package
            build_cmd: PYTHONIOENCODING=utf-8 python build_apkg.py
    
    steps:
      - uses: actions/checkout@v4
      
      # Setup for H5P builds
      - name: Setup Node.js
        if: matrix.component == 'h5p'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: h5p/package-lock.json
      
      - name: Install H5P dependencies
        if: matrix.component == 'h5p'
        working-directory: h5p
        run: npm ci
      
      # Setup for Anki build
      - name: Setup Python
        if: matrix.component == 'anki'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip
          cache-dependency-path: anki/requirements.txt
      
      - name: Install Anki dependencies
        if: matrix.component == 'anki'
        working-directory: anki
        run: pip install -r requirements.txt
      
      # Run builds
      - name: Build ${{ matrix.component }} - ${{ matrix.mode || 'package' }}
        working-directory: ${{ matrix.component }}
        run: ${{ matrix.build_cmd }}
      
      # Upload artifacts
      - name: Upload ${{ matrix.artifact }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: |
            ${{ matrix.component }}/dist/*
          retention-days: 30
          if-no-files-found: error

  # Test that built packages are valid
  validate:
    name: Validate packages
    runs-on: ubuntu-latest
    needs: build
    if: success()
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Validate file structure
        run: |
          echo "=== Validating built packages ==="
          
          # Check H5P packages
          if [ -d "artifacts/h5p-questionset" ]; then
            echo "QuestionSet H5P files:"
            ls -la artifacts/h5p-questionset/dist/*.h5p 2>/dev/null || echo "No QuestionSet files found"
          fi
          
          if [ -d "artifacts/h5p-mega" ]; then
            echo "Mega H5P files:"
            ls -la artifacts/h5p-mega/dist/*.h5p 2>/dev/null || echo "No Mega files found"
          fi
          
          # Check Anki package
          if [ -d "artifacts/anki-package" ]; then
            echo "Anki packages:"
            ls -la artifacts/anki-package/dist/*.apkg 2>/dev/null || echo "No Anki files found"
          fi
          
          # Validate H5P files are valid zip archives
          for h5p in artifacts/*/dist/*.h5p; do
            if [ -f "$h5p" ]; then
              echo "Validating: $h5p"
              unzip -t "$h5p" > /dev/null 2>&1 && echo "✓ Valid H5P archive" || echo "✗ Invalid H5P archive"
            fi
          done
      
      - name: Run validation script
        if: always()
        run: |
          if [ -f "check_files.py" ]; then
            PYTHONIOENCODING=utf-8 python check_files.py
          fi

  # Create release when tagged or manually triggered
  release:
    name: Create release
    runs-on: ubuntu-latest
    needs: [build, validate]
    if: |
      success() && (
        startsWith(github.ref, 'refs/tags/v') ||
        (github.event_name == 'workflow_dispatch' && github.event.inputs.release == 'true')
      )
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Prepare release assets
        run: |
          mkdir -p release
          
          # Copy all H5P files
          find artifacts -name "*.h5p" -exec cp {} release/ \;
          
          # Copy Anki packages
          find artifacts -name "*.apkg" -exec cp {} release/ \;
          
          # Create checksums
          cd release
          sha256sum * > SHA256SUMS.txt
          
          # Create release notes
          cat > ../RELEASE_NOTES.md << EOF
          ## 📦 Release Assets
          
          ### H5P Packages
          - QuestionSet format: Individual topic packages for interactive quizzes
          - Mega format: Combined multi-topic package with timer functionality
          
          ### Anki Package
          - Complete flashcard deck for all geriatrics topics
          - Hebrew language support
          - Formatted for optimal spaced repetition learning
          
          ### 🔒 Security
          All packages have been audited for security vulnerabilities.
          
          ### ✅ Validation
          All packages have been validated and tested.
          
          ---
          *Generated by automated CI/CD pipeline*
          EOF
      
      - name: Generate release tag
        id: tag
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "tag=v$(date +'%Y.%m.%d')-${{ github.run_number }}" >> $GITHUB_OUTPUT
          fi
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: "Release ${{ steps.tag.outputs.tag }}"
          body_path: RELEASE_NOTES.md
          files: |
            release/*
          draft: false
          prerelease: false
          generate_release_notes: true

  # Summary job for branch protection rules
  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [audit, build, validate]
    if: always()
    steps:
      - name: Summary
        run: |
          echo "## 📊 CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Audit results
          echo "### 🔒 Security Audits" >> $GITHUB_STEP_SUMMARY
          echo "- H5P (npm): ${{ needs.audit.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Anki (pip): ${{ needs.audit.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Build results
          echo "### 🏗️ Build Status" >> $GITHUB_STEP_SUMMARY
          echo "- Builds: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Validation: ${{ needs.validate.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Links
          echo "### 🔗 Quick Links" >> $GITHUB_STEP_SUMMARY
          echo "- [View Artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          echo "- [Repository](https://github.com/${{ github.repository }})" >> $GITHUB_STEP_SUMMARY
          
          # Set exit code based on results
          if [[ "${{ needs.build.result }}" != "success" ]] || [[ "${{ needs.validate.result }}" != "success" ]]; then
            exit 1
          fi